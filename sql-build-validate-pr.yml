name: Validate SQL Project on Pull Request

on:
  pull_request:
    branches: [ develop ]

jobs:
  validate-sql-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout merged PR commit
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Locate .sqlproj
        id: find_sqlproj
        run: |
          SQLPROJ_PATH=$(find . -name '*.sqlproj' | head -n1)
          echo "SQLPROJ_PATH=$SQLPROJ_PATH" >> $GITHUB_ENV

      - name: Restore & Build SQL Project
        run: |
          dotnet restore "$SQLPROJ_PATH"
          dotnet build "$SQLPROJ_PATH" --configuration Release

      - name: Validate DACPAC for unresolved references
        id: validate
        run: |
          DACPAC_PATH=$(find . -name "*.dacpac" | head -n1)
          echo "DACPAC_PATH=$DACPAC_PATH" >> $GITHUB_ENV
          
          # Run validation and capture output
          sqlpackage /Action:DriftReport /SourceFile:"$DACPAC_PATH" > validation_output.txt 2>&1
          
          cat validation_output.txt
          
          if grep -i "error" validation_output.txt; then
            echo "VALIDATION_STATUS=❌ Failed" >> $GITHUB_ENV
            echo "VALIDATION_RESULT<<EOF" >> $GITHUB_ENV
            tail -n 30 validation_output.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            exit 1
          else
            echo "VALIDATION_STATUS=✅ Passed" >> $GITHUB_ENV
            echo "VALIDATION_RESULT<<EOF" >> $GITHUB_ENV
            tail -n 30 validation_output.txt >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Post PR Comment with Validation Results
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body \
          "**SQL Validation Result**: ${{ env.VALIDATION_STATUS }}

\`\`\`
${{ env.VALIDATION_RESULT }}
\`\`\`
"
## V2
#
# .github/workflows/validate-sql-on-pr.yml
#
name: "Validate SQL Project on PR"

on:
  pull_request:
    branches:
      - develop

jobs:

  validate-sql-build:
    name: Validate SQL‑Project (unresolved references)
    runs-on: ubuntu-latest

    env:
      # Change to match your .sqlproj filename
      DATABASE_PROJECT_NAME: "TransversalDB"
      # Pin to whichever .NET you need
      DOTNET_VERSION: "8.0.x"

    steps:
      # 1) Check out the “merge commit” for this PR
      - name: Checkout merged PR commit
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge

      # 2) Install the .NET SDK
      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # 3) Find your .sqlproj in the repo (so we can build it)
      - name: Locate ${{ env.DATABASE_PROJECT_NAME }}.sqlproj
        id: find_sqlproj
        run: |
          SQLPROJ_PATH=$(find . -type f -name "${DATABASE_PROJECT_NAME}.sqlproj" | head -n1)
          if [[ -z "$SQLPROJ_PATH" ]]; then
            echo "❌ Could not find ${DATABASE_PROJECT_NAME}.sqlproj in the workspace!"
            exit 1
          fi
          echo "SQLPROJ_PATH=$SQLPROJ_PATH" >> "$GITHUB_ENV"
          echo "Found .sqlproj at: $SQLPROJ_PATH"

      # 4) Restore & Build so that any SQL71561 warnings → errors, 
      #    and also produce a build‐log at bin/Release/log.xml
      - name: Restore & Build (fail if unresolved references)
        id: build
        run: |
          PROJECT_DIR=$(dirname "$SQLPROJ_PATH")
          LOGFILE="$PROJECT_DIR/bin/Release/log.xml"

          # Make sure the directory exists (MSBuild will create bin/Release 
          #  if necessary, but we create it ourselves to be sure)
          mkdir -p "$PROJECT_DIR/bin/Release"

          echo "→ Restoring project..."
          dotnet restore "$SQLPROJ_PATH"

          echo "→ Building project (unresolved references turn to errors)..."
          dotnet build "$SQLPROJ_PATH" \
            --configuration Release \
            /p:NetCoreBuild=true \
            /p:AllowUnresolvedReferences=false \
            /flp:logfile="$LOGFILE";verbosity=detailed

          # If MSBuild returns exit code 1 due to SQL71561, then this step fails automatically.
          # If it succeeds, the LOGFILE now contains a full XML log of warnings/errors for us to grep.
        shell: bash

      #
      # 5) Post a PR comment. 
      #    We must do this “always()” so that—even if the build fails—we still comment.
      #
      - name: Authenticate GitHub CLI
        if: always()
        env:
          GH_TOKEN: ${{ secrets.USF_DB_PROJECTS_GIT_PAT_TOKEN }}
        run: |
          # Feed the PAT into gh so gh pr comment is authenticated.
          echo "${GH_TOKEN}" | gh auth login --with-token

      - name: Post PR Comment with Build Results
        if: always()
        run: |
          PROJECT_DIR=$(dirname "$SQLPROJ_PATH")
          LOGFILE="$PROJECT_DIR/bin/Release/log.xml"

          if [[ "${{ steps.find_sqlproj.outcome }}" != "success" ]]; then
            BODY="*SQL Validation*: ❌ Could not locate ${DATABASE_PROJECT_NAME}.sqlproj."
          elif [[ "${{ steps.build.outcome }}" == "success" ]]; then
            BODY="*SQL Validation*: ✅ No unresolved references; build succeeded."
          else
            # Build failed. Let’s see if it was due to SQL71561 or something else.
            if [[ -f "$LOGFILE" ]]; then
              # Grep for SQL71561 (unresolved‐reference) in the MSBuild log:
              ERR_LINES=$(grep -‎i "SQL71561" "$LOGFILE" || true)
              if [[ -z "$ERR_LINES" ]]; then
                # Build failed for some other reason (e.g. compile error). Just show last 30 lines of the log.
                PREVIEW=$(tail -n 30 "$LOGFILE")
                BODY=$(
                  printf "%s\n\n" \
                    "*SQL Validation*: ❌ Build failed (not a SQL71561‐reference). See snapshot:" \
                    "xml"
                  printf "%s\n" "$PREVIEW"
                  printf ""
                )
              else
                # We definitely saw one or more “SQL71561” entries
                PREVIEW=$(echo "$ERR_LINES" | head -n 30)
                BODY=$(
                  printf "%s\n\n" \
                    "*SQL Validation*: ❌ Found missing‐reference errors (SQL71561):" \
                    "text"
                  printf "%s\n" "$PREVIEW"
                  printf ""
                )
              fi
            else
              # No log file at all! (That shouldn’t happen if the build step ran MSBuild 
              #  with /flp:logfile, but just in case…)
              BODY="*SQL Validation*: ❌ Build failed and no log was generated."
            fi
          fi

          # Finally, post the comment on the PR
          gh pr comment ${{ github.event.pull_request.number }} --body "$BODY"
