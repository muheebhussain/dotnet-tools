# ─── Stage 1: build the .sqlproj & produce a DACPAC ─────────────
FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS builder
WORKDIR /src

# install certs for nuget HTTPS
RUN apk add --no-cache ca-certificates

# copy only project & nuget.config for cache-friendly restore
ARG PROJECT_PATH=src/Database/Database.sqlproj
COPY ${PROJECT_PATH%/*}/nuget.config /tmp/nuget.config
COPY ${PROJECT_PATH%/*}/*.sqlproj ${PROJECT_PATH%/*}/
RUN dotnet restore "$PROJECT_PATH" --configfile /tmp/nuget.config

# build
COPY . .
ARG OUTPUT_DIR=/src/out
RUN dotnet build "$PROJECT_PATH" -c Release -o $OUTPUT_DIR


# ─── Stage 2: extract sqlpackage from SDK ───────────────────────
FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS tools
WORKDIR /tools

# reuse the same nuget.config
COPY --from=builder /tmp/nuget.config /tmp/nuget.config

RUN dotnet tool install --global Microsoft.SqlPackage \
      --configfile /tmp/nuget.config \
 && cp /root/.dotnet/tools/sqlpackage /usr/local/bin/sqlpackage


# ─── Stage 3: final runtime only + sqlpackage ───────────────────
FROM mcr.microsoft.com/dotnet/runtime:8.0-alpine AS runtime
WORKDIR /app

# install certs if needed at runtime
RUN apk add --no-cache ca-certificates

# pull in just the DACPAC + sqlpackage binary
ARG DACPAC_NAME=Database.dacpac
COPY --from=builder /src/out/${DACPAC_NAME}     ./db.dacpac
COPY --from=tools   /usr/local/bin/sqlpackage   /usr/local/bin/sqlpackage

# entrypoint
COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

ENTRYPOINT ["./entrypoint.sh"]
