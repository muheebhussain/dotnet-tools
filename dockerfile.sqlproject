# Stage 1: build the .sqlproj and produce the .dacpac
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# copy only project files to leverage Docker cache
COPY MyDatabase/MyDatabase.csproj MyDatabase/
RUN dotnet restore MyDatabase/MyDatabase.csproj

# copy the rest and build
COPY MyDatabase/ MyDatabase/
RUN dotnet build MyDatabase/MyDatabase.csproj \
    --configuration Release \
    -o /app/build

# Stage 2: runtime image with sqlpackage installed via dotnet tool
FROM mcr.microsoft.com/dotnet/runtime:8.0 AS runtime
WORKDIR /app

# copy the built dacpac
COPY --from=build /app/build/*.dacpac ./MyDatabase.dacpac

# install Microsoft.SqlPackage as a global toola
RUN dotnet tool install --global Microsoft.SqlPackage \
 && echo "Adding dotnet tools to PATH" \
 && export DOTNET_TOOLS="/root/.dotnet/tools" \
 && ln -s "$DOTNET_TOOLS/sqlpackage" /usr/local/bin/sqlpackage

# ensure the tools path is in PATH for future commands
ENV PATH="$PATH:/root/.dotnet/tools"

# copy entrypoint
COPY entrypoint.sh .
RUN chmod +x entrypoint.sh

ENTRYPOINT ["./entrypoint.sh"]



#***********************
FROM mcr.microsoft.com/dotnet/runtime:8.0 AS runtime
WORKDIR /app

# copy the built DACPAC from the build stage
COPY --from=build /app/build/*.dacpac ./MyDatabase.dacpac

# install the SqlPackage global tool
RUN dotnet tool install --global Microsoft.SqlPackage \
 && echo "Adding dotnet tools to PATH" \
 && ln -s /root/.dotnet/tools/sqlpackage /usr/local/bin/sqlpackage

# ──────────────── COPY ENTRYPOINT ────────────────
# brings your script into the container
COPY entrypoint.sh /app/entrypoint.sh

# make it executable
RUN chmod +x /app/entrypoint.sh

# ensure the dotnet tools folder is in PATH
ENV PATH="$PATH:/root/.dotnet/tools"

# run your entrypoint on container start
ENTRYPOINT ["/app/entrypoint.sh"]

