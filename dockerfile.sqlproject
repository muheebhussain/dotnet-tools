# ─── Build Stage ───────────────────────────────────────────────────────
ARG DOTNET_SDK_IMAGE=mcr.microsoft.com/dotnet/sdk:8.0-alpine
FROM ${DOTNET_SDK_IMAGE} AS build

# overridable build-time args
ARG PROJECT_PATH=src/Database/Database.sqlproj
ARG OUTPUT_DIR=/app/build

WORKDIR /src

# 1) Install CA certs so HTTPS (nuget.org or private feeds) works
RUN apk update \
 && apk add --no-cache ca-certificates \
 && update-ca-certificates

# 2) Copy your private certs (if you have any) into the trust store
# COPY certs/*.crt /usr/local/share/ca-certificates/
# RUN update-ca-certificates

# 3) Copy only what you need to restore
COPY ${PROJECT_PATH%/*}/nuget.config /tmp/nuget.config
COPY ${PROJECT_PATH%/*}/*.sqlproj       ${PROJECT_PATH%/*}/

# 4) Restore
RUN dotnet restore "${PROJECT_PATH}" --configfile /tmp/nuget.config

# 5) Copy everything else & build
COPY . .
RUN dotnet build "${PROJECT_PATH}" \
    --configuration Release \
    --output ${OUTPUT_DIR}


# ─── Runtime Stage ─────────────────────────────────────────────────────
FROM ${DOTNET_SDK_IMAGE} AS runtime
WORKDIR /app

# 6) Re-install CA certs here, too (for any HTTPS calls at runtime)
RUN apk update \
 && apk add --no-cache ca-certificates \
 && update-ca-certificates

# 7) Pull in the built DACPAC
ARG DACPAC_NAME=Database.dacpac
COPY --from=build ${OUTPUT_DIR}/${DACPAC_NAME} ./

# 8) Install sqlpackage as a global tool via your nuget.config
COPY --from=build /tmp/nuget.config /tmp/nuget.config
RUN dotnet tool install --global Microsoft.SqlPackage \
      --configfile /tmp/nuget.config \
    && ln -s /root/.dotnet/tools/sqlpackage /usr/local/bin/sqlpackage

ENV PATH="$PATH:/root/.dotnet/tools"

# 9) Copy & enable your entrypoint
COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

ENTRYPOINT ["/app/entrypoint.sh"]
